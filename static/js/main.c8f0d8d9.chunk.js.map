{"version":3,"sources":["components/UserInfo/UserInfo.tsx","api/users.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoForm/TodoForm.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","id","username","TodoInfo","todo","cn","completed","title","userId","usersFromServer","find","TodoList","todos","map","DEFAULT_INPUTS","DEFAULT_INPUTS_ERRORS","TodoForm","onAdd","users","useState","inputs","setInputs","errors","setErrors","inputChange","event","target","value","parsedValue","prevFields","prevErrors","isFormValid","action","method","onSubmit","preventDefault","type","placeholder","onChange","defaultChecked","disabled","App","todosFromServer","setTodos","currentTodos","Math","max","ReactDOM","render","document","getElementById"],"mappings":"6OAMaA,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,mBAAGC,UAAU,WAAWC,KAAI,wBAAYF,QAAZ,IAAYA,OAAZ,EAAYA,EAAMG,OAA9C,gBACGH,QADH,IACGA,OADH,EACGA,EAAMI,QCRI,GACb,CACEC,GAAI,EACJD,KAAM,gBACNE,SAAU,OACVH,MAAO,qBAET,CACEE,GAAI,EACJD,KAAM,eACNE,SAAU,YACVH,MAAO,qBAET,CACEE,GAAI,EACJD,KAAM,mBACNE,SAAU,WACVH,MAAO,sBAET,CACEE,GAAI,EACJD,KAAM,mBACNE,SAAU,WACVH,MAAO,6BAET,CACEE,GAAI,EACJD,KAAM,mBACNE,SAAU,SACVH,MAAO,4BAET,CACEE,GAAI,EACJD,KAAM,uBACNE,SAAU,mBACVH,MAAO,2BAET,CACEE,GAAI,EACJD,KAAM,kBACNE,SAAU,eACVH,MAAO,0BAET,CACEE,GAAI,EACJD,KAAM,2BACNE,SAAU,gBACVH,MAAO,wBAET,CACEE,GAAI,EACJD,KAAM,kBACNE,SAAU,WACVH,MAAO,2BAET,CACEE,GAAI,GACJD,KAAM,qBACNE,SAAU,iBACVH,MAAO,2BC7CJ,IAAMI,EAA4B,SAAC,GAAD,IAJpBF,EAIuBG,EAAH,EAAGA,KAAH,OACvC,0BACE,UAASA,EAAKH,GACdJ,UAAWQ,IACT,WACA,CAAE,sBAAuBD,EAAKE,YAJlC,UAOE,oBAAIT,UAAU,kBAAd,SACGO,EAAKG,QAER,cAAC,EAAD,CAAUX,MAfOK,EAeWG,EAAKI,OAd5BC,EAAgBC,MAAK,SAACd,GAAD,OAAgBA,EAAKK,KAAOA,MAAO,YCJpDU,EAA2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtC,yBAASf,UAAU,WAAnB,SACGe,EAAMC,KAAI,SAAAT,GAAI,OACb,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKH,U,OCDpBa,EAAiB,CACrBP,MAAO,GACPC,OAAQ,GAGJO,EAAwB,CAC5BR,OAAO,EACPC,QAAQ,GAGGQ,EAA4B,SAAC,GAAiC,IAAD,IAA9BC,aAA8B,MAAtB,aAAsB,EAAZC,EAAY,EAAZA,MAC5D,EAA4BC,mBAASL,GAArC,mBAAOM,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAASJ,GAArC,mBAAOO,EAAP,KAAeC,EAAf,KAEMC,EAAc,SAACC,GAEnB,MAAwBA,EAAMC,OAAtB1B,EAAR,EAAQA,KAAM2B,EAAd,EAAcA,MACRC,EAAuB,WAAT5B,GAAqB2B,EAAQA,EAEjDN,GAAU,SAAAQ,GAAU,kCACfA,GADe,kBAEjB7B,EAAO4B,OAGVL,GAAU,SAAAO,GAAU,kCACfA,GADe,kBAEjB9B,GAAQ4B,QASPG,GAAeT,EAAOf,QAAUe,EAAOd,OAgB7C,OACE,uBACEwB,OAAO,aACPC,OAAO,OACPC,SAlBiB,SAACT,GACpBA,EAAMU,iBAEFJ,IACFd,EAAM,2BACDG,GADA,IAEHnB,GAAI,EACJK,WAAW,EACXE,OAAQY,EAAOZ,UAdnBa,EAAUP,GACVS,EAAUR,KAoBV,UAKE,sBAAKlB,UAAU,QAAf,UACG,UACD,uBACEuC,KAAK,OACL,UAAQ,aACRT,MAAOP,EAAOb,MACd8B,YAAY,cACZC,SAAUd,EACVxB,KAAK,UAENsB,EAAOf,OACN,sBAAMV,UAAU,QAAhB,qCAIJ,sBAAKA,UAAU,QAAf,UACG,SACD,yBACE,UAAQ,aACR8B,MAAOP,EAAOZ,OACd8B,SAAUd,EACVxB,KAAK,SAJP,UAME,wBAAQ2B,MAAM,IAAIY,gBAAc,EAAhC,2BACCrB,EAAML,KAAI,SAAAjB,GAAI,OACb,wBAAQ+B,MAAO/B,EAAKK,GAApB,SACGL,EAAKI,MADqBJ,EAAKK,UAMrCqB,EAAOd,QACN,sBAAMX,UAAU,QAAhB,qCAGJ,wBAAQuC,KAAK,SAAS,UAAQ,eAAeI,UAAWT,EAAxD,qBCrGS,GACb,CACE9B,GAAI,EACJM,MAAO,qBACPD,WAAW,EACXE,OAAQ,GAEV,CACEP,GAAI,GACJM,MAAO,kBACPD,WAAW,EACXE,OAAQ,GAEV,CACEP,GAAI,EACJM,MAAO,qCACPD,WAAW,EACXE,OAAQ,ICRCiC,EAAM,WACjB,MAA0BtB,mBAASuB,GAAnC,mBAAO9B,EAAP,KAAc+B,EAAd,KAiBA,OACE,sBAAK9C,UAAU,MAAf,UACE,+CAEA,cAAC,EAAD,CAAUoB,MAbE,SAACb,GACfuC,GAAS,SAAAC,GAAY,4BAChBA,GADgB,4BAGdxC,GAHc,IAIjBH,GAVU4C,KAAKC,IAAL,MAAAD,KAAI,YAAQjC,EAAMC,KAAI,qBAAGZ,QAExB,UAgBaiB,MAAOT,IACjC,cAAC,EAAD,CAAUG,MAAOA,QC7BvBmC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c8f0d8d9.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ninterface Props {\n  user: User | null,\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport usersFromServer from '../../api/users';\n\ninterface Props {\n  todo: Todo,\n}\n\nfunction getUserById(id: number): User | null {\n  return usersFromServer.find((user: User) => user.id === id) || null;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={cn(\n      'TodoInfo',\n      { 'TodoInfo--completed': todo.completed },\n    )}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n    <UserInfo user={getUserById(todo.userId)} />\n  </article>\n);\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n}\n\nexport const TodoList:React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","import { useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  onAdd: (newTodo: Todo) => void,\n  users: User[],\n}\n\nconst DEFAULT_INPUTS = {\n  title: '',\n  userId: 0,\n};\n\nconst DEFAULT_INPUTS_ERRORS = {\n  title: false,\n  userId: false,\n};\n\nexport const TodoForm: React.FC<Props> = ({ onAdd = () => {}, users }) => {\n  const [inputs, setInputs] = useState(DEFAULT_INPUTS);\n  const [errors, setErrors] = useState(DEFAULT_INPUTS_ERRORS);\n\n  const inputChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLSelectElement>) => {\n    const { name, value } = event.target;\n    const parsedValue = name === 'userId' ? +value : value;\n\n    setInputs(prevFields => ({\n      ...prevFields,\n      [name]: parsedValue,\n    }));\n\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      [name]: !parsedValue,\n    }));\n  };\n\n  const reset = () => {\n    setInputs(DEFAULT_INPUTS);\n    setErrors(DEFAULT_INPUTS_ERRORS);\n  };\n\n  const isFormValid = !errors.title && !errors.userId;\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (isFormValid) {\n      onAdd({\n        ...inputs,\n        id: 0,\n        completed: false,\n        userId: inputs.userId,\n      });\n      reset();\n    }\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        {'Title: '}\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          value={inputs.title}\n          placeholder=\"Enter title\"\n          onChange={inputChange}\n          name=\"title\"\n        />\n        {errors.title && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        {'User: '}\n        <select\n          data-cy=\"userSelect\"\n          value={inputs.userId}\n          onChange={inputChange}\n          name=\"userId\"\n        >\n          <option value=\"0\" defaultChecked>Choose a user</option>\n          {users.map(user => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {errors.userId && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n      <button type=\"submit\" data-cy=\"submitButton\" disabled={!isFormValid}>\n        Add\n      </button>\n    </form>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm';\nimport { Todo } from './types/Todo';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const getNewTodoId = () => {\n    const maxId = Math.max(...todos.map(({ id }) => id));\n\n    return maxId + 1;\n  };\n\n  const addTodo = (todo: Todo) => {\n    setTodos(currentTodos => [\n      ...currentTodos,\n      {\n        ...todo,\n        id: getNewTodoId(),\n      }]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onAdd={addTodo} users={usersFromServer} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}